/// 1.提供trait(MarketUpdate, OrderGenerator, FillUpdater)，用以处理各种对应的输入的Event和输出对应的Event.
/// 2.提供向下游(Execution)流动的Event的数据结构: OrderEvent.
/// 3.提供任意时刻的总资产额和可用资产额的数据结构.
///
use chrono::{DateTime, Utc};
use uuid::Uuid;

pub mod portfolio;

////////////////////////////////////////////////////////////////////////////////////////
///
/// 1.Portfolio模块对外的边界(入/出)trait
///
////////////////////////////////////////////////////////////////////////////////////////

/// Update the [Portfolio] from an input [MarketEvent].
/// 根据传入的MarketEvent，来更新Portfolio.
pub trait MarketUpdate {
    /// If the [Portfolio] has an open [Position] relating to the input [MarketEvent],
    /// update it with the market data, and return [PositionUpdate] detailing the change.
    /// 如果Portfolio中开放了一个跟MarketEvent相关的Position，就更新该Portfolio，并以PositionUpdate结构返回详细的改动细节.
    ///
    /// TODELETE: update_from_market -> update_position_from_market
    ///
    /// Think: MarketUpdate, FillUpdate, OrderGenerator这三个trait中的方法，因为只会在Portfolio模块中使用，因此fn不对外
    fn update_position_from_market(
        &mut self,
        market: &MarketEvent<DataKind>, // DataKind:
    ) -> Result<Option<PositionUpdate>, PortfolioError>;
}

/// Update the [Portfolio] from an input [FillEvent].
pub trait FillUpdater {
    /// Update the [Portfolio] with the input [FillEvent].
    /// The [FillEvent] triggers a [Position] entry or exit, and update key fields(such as current_cash and current_value) accordingly.
    /// 使用输入的FillEvent，来更新投资组合的内部状态.
    /// FillEvent会触发Position(持仓)的进入或退出，并更新Portfolio中相应的关键字段(如当前现金，当前价值)
    ///
    /// TODELETE: update_from_fill -> update_portfolio_from_fill
    fn update_portfolio_from_fill(
        &mut self,
        fill: &FillEvent,
    ) -> Result<Vec<Event>, PortfolioError>;
}

/// May generate an [OrderEvent] from an input [SignalEvent].
pub trait OrderGenerator {
    /// May genrate an [OrderEvent] after analysing the input [SignalEvent].
    /// TODELETE: generate_order -> generate_order_from_signal
    fn generate_order_from_signal(
        &mut self,
        signal: &SignalEvent,
    ) -> Result<Option<OrderEvent>, PortfolioError>;
}

////////////////////////////////////////////////////////////////////////////////////////
///
/// 2.Portfolio流向下游的Execution模块的数据结构
///
////////////////////////////////////////////////////////////////////////////////////////

/// [OrderEvent] is generated by the [Portfolio],
/// and details work to be done by an [Execution] handler to open a trade.
pub struct OrderEvent {
    pub kind: OrderKind,         // Order种类
    pub exchange: Exchange,      // 交易所
    pub instrument: Instrument,  // 金融工具((base, quote, kind))
    pub decision: Decision,      // 决策: Long/CloseLong/Short/CloseShort(多头/平多/空头/平空)
    pub quantity: f64,           // 取决于decision决策的数量
    pub market_meta: MarketMeta, // Market元数据
    pub time: DateTime<Utc>,     // 生成OrderEvent的时间
}

/// TODELETE: 刻意省略各种Struct的builder结构体(其存在的意义是先创建一个空的结构体，然后提供多个方法以供修改每一个字段)

////////////////////////////////////////////////////////////////////////////////////////
///
/// 3.Portfolio模块顶层的状态的数据结构
///
////////////////////////////////////////////////////////////////////////////////////////

/// [OrderKind]是[Portfolio]内嵌在[OrderEvent]中，提供给[Execution]处理的订单类型.
/// 投资者根据交易策略[Strategy]和风险偏好[Risk]来选择[OrderKind].
pub enum OrderKind {
    Market,  // 市价订单: 即以市场当前可用的最佳价格成交
    Limit,   // 限价订单: 指定买入/卖出的价格(故可能无法立即成交)
    Bracket, // 挂接订单: 是一种包含止损/止盈条件的订单
}

/// 将市价订单[Market]作为默认的[OrderKind].
impl Default for OrderKind {
    fn default() -> Self {
        Self::Market
    }
}

/// 在任意给定时刻的total和available余额
pub struct Balance {
    pub time: DateTime<Utc>,
    pub total: f64,     // 总额: [Portfolio]的总资产价值
    pub available: f64, // 可用额: 投资组合中可用于交易的资产(比如已购买资产的价值等是暂时不可继续交易的)
}

impl Default for Balance {
    fn default() -> Self {
        Self {
            time: Utc::now(),
            total: 0.0,
            available: 0.0,
        }
    }
}

// Think: 不直接使用String, 而是定义一个类型
pub type BalanceId = String;

impl Balance {
    pub fn new(time: DateTime<Utc>, total: f64, available: f64) -> Self {
        Self {
            time,
            total,
            available,
        }
    }

    /// Returns the unique identifier for an Engine's [`Balance`].
    /// 返回某个[Engine]的[Balance]的标识符.(因为一个Engine只关联了一个Portfolio，每个Portfolio只有一个Balance结构体实例)
    pub fn balance_id(engine_id: Uuid) -> BalanceId {
        format!("balance_{}", engine_id)
    }
}
